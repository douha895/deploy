# Generated by Django 5.2.4 on 2025-07-28 07:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('CLIENT', 'Client'), ('AGENT', 'Agent de station'), ('ADMIN', 'Administrateur')], default='CLIENT', max_length=10)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_number', models.CharField(max_length=20, unique=True)),
                ('card_type', models.CharField(choices=[('GOLD_VAL', 'Gold Valeur (Multi-produits)'), ('GOLD_VOL', 'Gold Volume (Mono-produit)'), ('CASH_PRE', 'Cash Prépayée'), ('CASH_POST', 'Cash Postpayée')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('credit_limit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('issue_date', models.DateField(auto_now_add=True)),
                ('expiry_date', models.DateField()),
                ('pin_code', models.CharField(blank=True, max_length=4)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reclamation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_type', models.CharField(blank=True, choices=[('GOLD_VAL', 'Gold Valeur (Multi-produits)'), ('GOLD_VOL', 'Gold Volume (Mono-produit)'), ('CASH_PRE', 'Cash Prépayée'), ('CASH_POST', 'Cash Postpayée')], max_length=10, null=True, verbose_name='Type de carte')),
                ('card_number_manual', models.CharField(blank=True, max_length=20, verbose_name='Numéro de carte saisie')),
                ('problem_type', models.CharField(choices=[('CARD_REJECTED', 'Carte rejetée lors du paiement'), ('CARD_BLOCKED', 'Carte bloquée/inactive'), ('BALANCE_ERROR', 'Solde incorrect'), ('RECHARGE_ISSUE', 'Recharge non reçue'), ('LIMIT_ISSUE', 'Problème de plafond'), ('LOST_STOLEN', 'Carte volée/perdue'), ('PAYMENT_REFUSED', 'Paiement refusé après utilisation'), ('DOUBLE_CHARGE', 'Double facturation'), ('DAMAGED_CARD', 'Carte endommagée'), ('DELIVERY_DELAY', 'Livraison en retard'), ('STATION_ISSUE', 'Problème technique en station'), ('FRAUD', 'Fraude suspectée'), ('OTHER', 'Autre problème')], max_length=20)),
                ('station_coords', models.CharField(blank=True, max_length=50, null=True, verbose_name='Coordonnées de la station (lat,lng)')),
                ('description', models.TextField()),
                ('incident_date', models.DateField()),
                ('incident_time', models.TimeField()),
                ('status', models.CharField(choices=[('OPEN', 'Ouverte'), ('IN_PROGRESS', 'En cours'), ('RESOLVED', 'Résolue'), ('REJECTED', 'Rejetée')], default='OPEN', max_length=20, verbose_name='Statut')),
                ('priority', models.CharField(choices=[('LOW', 'Basse'), ('MEDIUM', 'Moyenne'), ('HIGH', 'Haute')], default='MEDIUM', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('estimated_resolution', models.CharField(blank=True, max_length=50)),
                ('requires_callback', models.BooleanField(default=False)),
                ('contact_method', models.CharField(choices=[('EMAIL', 'Email'), ('PHONE', 'Téléphone')], default='EMAIL', max_length=10)),
                ('assigned_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_reclamations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reclamations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Réclamation',
                'verbose_name_plural': 'Réclamations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='reclamations/attachments/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=100)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_type', models.CharField(choices=[('IMAGE', 'Image'), ('PDF', 'PDF'), ('OTHER', 'Autre')], default='IMAGE', max_length=20)),
                ('reclamation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='reclamations.reclamation')),
            ],
        ),
        migrations.CreateModel(
            name='ReclamationUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_status_change', models.BooleanField(default=False)),
                ('new_status', models.CharField(blank=True, max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_internal_note', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reclamation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='reclamations.reclamation')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('opening_hours', models.CharField(default='24/7', max_length=100)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_stations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='reclamation',
            name='station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reclamations.station'),
        ),
        migrations.AddField(
            model_name='user',
            name='assigned_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reclamations.station'),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_type', models.CharField(choices=[('FUEL', 'Carburant'), ('SHOP', 'Boutique'), ('RECHARGE', 'Recharge')], max_length=10)),
                ('date', models.DateTimeField()),
                ('fuel_type', models.CharField(blank=True, max_length=20)),
                ('quantity', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_successful', models.BooleanField(default=True)),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reclamations.card')),
                ('station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='reclamations.station')),
            ],
            options={
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['card', 'date'], name='reclamation_card_id_c82c13_idx')],
            },
        ),
    ]
